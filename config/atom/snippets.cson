# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.elixir':
  'nomoduledoc':
    'prefix': 'mdf'
    'description': 'Module has no docs'
    'rightLabelHTML': '@moduledoc false'
    'body': '@moduledoc false'
  'moduledoc':
    'prefix': 'md'
    'description': 'Insert module document block'
    'rightLabelHTML': '@moduledoc \"\"\" .. \"\"\"'
    'body': """
    @moduledoc \"\"\"
    ${1:This module does...}
    \"\"\"
    """
  'nodoc':
    'prefix': 'docf'
    'description': 'Function has no docs'
    'rightLabelHTML': '@doc false'
    'body': '@doc false'
  'doc':
    'prefix': 'doc'
    'description': 'Insert function doc block'
    'rightLabelHTML': '@doc \"\"\" .. \"\"\"'
    'body': """
    @doc \"\"\"
      ${1:This function does...}

    Example:
      iex> ${2:Call like this...}
      ${3:Expecting this result}
    \"\"\"
    """
  'def':
    'prefix': 'd'
    'description': 'Define a public named multiline function'
    'rightLabelHTML': 'def f(x) do .. end'
    'body': """
    def ${1:function}(${2:arguments}) do
      $3
    end
    """
  'defdo':
    'prefix': 'dd'
    'description': 'Define a public named single-line function'
    'rightLabelHTML': 'def <em>f</em>(<em>x</em>) do: ..'
    'body': 'def ${1:function}(${2:arguments}), do: $3'
  'defp':
    'prefix': 'dp'
    'description': 'Define a private named multiline function'
    'rightLabelHTML': 'defp <em>f</em>(<em>x</em>) do .. end'
    'body': """
    defp ${1:function}(${2:arguments}) do
      $3
    end
    """
  'defpdo':
    'prefix': 'dpd'
    'description': 'Define a private named single-line function'
    'rightLabelHTML': 'defp <em>f</em>(<em>x</em>) do: ..'
    'body': 'defp ${1:function}(${2:arguments}), do: $3'
  'defmodule':
    'prefix': 'dm'
    'description': 'Define a module'
    'rightLabelHTML': 'defmodule <em>Module</em> do .. end'
    'body': """
    defmodule ${1:ModuleName} do
      $2
    end
    """
  'defstruct':
    'prefix': 'ds'
    'description': 'Define a struct'
    'rightLabelHTML': 'defstruct do .. end'
    'body': """
    defstruct do
      $1
    end
    """
  'genserver':
    'prefix': 'genserv'
    'description': 'Generate a GenServer Skeleton'
    'body': """
    defmodule ${1:MyServer} do
      use GenServer

      def start_link(${2::ok}) do
        GenServer.start_link(__MODULE__, $2, name: __MODULE__)
      end

      def stop(), do: GenServer.stop(__MODULE__, :normal)

      def init(${3:_}, state), do: {:ok, state}

      def handle_call(_, _from, state), do: {:noreply, state}

      def handle_cast(_, state), do: {:noreply, state}
    end
    """
